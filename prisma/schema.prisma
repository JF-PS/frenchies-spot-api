// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator appsync {
  provider = "prisma-appsync"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Log {
  id      String @id @default(uuid())
  message String
  level   Level
  meta    Json
}

enum Level {
  Warning
  Info
  Error
}

model Test {
  id   String @id @default(uuid())
  text String @unique
}


model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  token    String   @unique
  role     Role     @default(SIMPLE_USER)
  profile  Profile?
}

enum Role {
  SIMPLE_USER
  USER_ADMIN
}

model Profile {
  id        String    @id @default(uuid())
  pseudo    String    @unique
  photoUrl  String?
  gamePoint Int       @default(0)
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Implicit relations many to many with itinary
  itinaries Itinary[]
  // Relations one to many with spot
  spots     Spot[]
  // Relations one to many with rating
  ratings   Rating[]
}

model Itinary {
  id          String    @id @default(uuid())
  name        String
  description String
  gamePoint   Int?
  photoUrl    String?
  // Implicit relations many to many with profile
  profiles    Profile[]
  // Implicit relations many to many with spot
  spots       Spot[]
}

model Spot {
  id          String         @id @default(uuid())
  name        String
  description String
  isCanPark   Boolean        @default(false)
  isCanVisit  Boolean        @default(false)
  isTouristic Boolean        @default(false)
  // Relations one to many with profile
  profile     Profile        @relation(fields: [profileId], references: [id])
  profileId   String
  // Implicit relations many to many with itinary
  itinaries   Itinary[]
  lat         Float
  lng         Float
  region      String
  // Relations one to many with spot_pictures
  spotPicture Spot_Picture[]
  // Relations one to many with rating
  ratings     Rating[]
}

model Spot_Picture {
  id     String @id @default(uuid())
  url    String
  spot   Spot   @relation(fields: [spotId], references: [id])
  spotId String
}

model Product {
  id  String @id @default(uuid())
  photoUrl    String?
  gamePoints Int
  price Int
}

model Rating {
  id        String  @id @default(uuid())
  rate      Int     
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  spot      Spot   @relation(fields: [spotId], references: [id])
  spotId    String
}
